import numpy as np
import sympy as sp
import matplotlib.pyplot as plt

# Solicitar función al usuario
x = sp.Symbol('x')
funcion_str = input("Introduce la función en términos de x (ej. 2*x - 2): ")
funcion = sp.sympify(funcion_str)  # Convierte el input a función simbólica

# Solicitar valores de x
x_vals = list(map(float, input("Introduce valores de x separados por comas (ej. -2,-1,0,1,2): ").split(',')))

# Calcular valores de y
y_vals = [funcion.subs(x, val) for val in x_vals]

# Determinar el rango de la función
rango = (min(y_vals), max(y_vals))

# Definir condiciones
condiciones = "Positiva para x > 0, Negativa para x < 0" if funcion.coeff(x) > 0 else "Invertida"

# Aplicar el método de bisección
def biseccion(f, a, b, tol=1e-5):
    if f.subs(x, a) * f.subs(x, b) >= 0:
        print("El intervalo no contiene una raíz.")
        return None
    while (b - a) / 2 > tol:
        c = (a + b) / 2
        if f.subs(x, c) == 0:
            return c
        elif f.subs(x, a) * f.subs(x, c) < 0:
            b = c
        else:
            a = c
    return (a + b) / 2

raiz = biseccion(funcion, min(x_vals), max(x_vals))

# Graficar la función
x_plot = np.linspace(min(x_vals)-1, max(x_vals)+1, 100)
y_plot = [funcion.subs(x, val) for val in x_plot]

plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.grid()
plt.plot(x_plot, y_plot, label=f"f(x) = {funcion}")
plt.scatter(x_vals, y_vals, color='red', zorder=3, label="Puntos dados")
plt.legend()
plt.show()

# Mostrar resultados
print(f"Función: f(x) = {funcion}")
print(f"Valores de x: {x_vals}")
print(f"Valores de y: {y_vals}")
print(f"Rango de la función: {rango}")
print(f"Condiciones: {condiciones}")
print(f"Raíz aproximada por bisección: {raiz if raiz else 'No encontrada'}")
